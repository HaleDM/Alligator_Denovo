Denovo_Assembly Pipeline
Attempting to develop a pipeline for the QC, assembly, and DEG analysis of alligator RNAseq reads in a de novo fashion
for later use in de novo transcriptome assembly of Ambystoma opacum RNAseq reads

#Upon researching methods and approaches for de novo transcriptome analysis, I found a resource
#from the Harvard FAS Informatics core (https://informatics.fas.harvard.edu/best-practices-for-de-novo-transcriptome-assembly-with-trinity.html)
#that outlined a robust and rigorous approach to de novo assembly using Trinity, a well-maintained and popular assembler
#that relies on De Brujin's graphs and Kmer assembly. The Harvard resource suggests using a QC and trimming tool called
#rCorrector to remove erroneous kMers from Illumina reads prior to utilization in assembly. Because we are using
#the same RNAseq reads from STIM2014, for which I have assessed quality via Fast/MultiQC, this step *shouldn't*
#be necessary. But because we are building this pipeline for a yet-untested read-set, I'm going to start with 
#this step anyway. At best, it will identify possible unforeseen QC issues in our STIM RNAseq reads and improve
#Ambystoma assembly generation, and at worst it will take up a little bit of time and not actually be helpful.

#Below is a working test script that I ran against one sample for rCorrector. This program
#corrects rare Kmers that are usually either sequencing errors or very rare transcripts
#This presents a trade-off, then, but rare transcripts are likely not going to be assembled
#anyway

#PBS -S /bin/bash
#PBS -q batch
#PBS -N rCorrector1.3test
#PBS -l nodes=1:ppn=1
#PBS -l walltime=48:00:00
#PBS -l mem=20gb

cd /lustre1/mdh72859/Denovo_Assembly
module load Rcorrector/1.0.2-foss-2016b
run_rcorrector.pl -1 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L001_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L002_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L003_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L004_R1_001.fastq -2 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L001_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L002_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L003_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L004_R2_001.fastq > rCorrector_134.log

#It appears to have worked:
Processed 29459422 reads
	Corrected 4456109 bases.
	
#This test script was scaled up and applied to all 8 samples
#PBS -S /bin/bash
#PBS -q batch
#PBS -M matthew.hale@uga.edu 
#PBS -m ae
#PBS -N rCorrector1.0
#PBS -l nodes=1:ppn=4
#PBS -l walltime=48:00:00
#PBS -l mem=20gb

cd /lustre1/mdh72859/Denovo_Assembly
mkdir rCorrector_Output
cd rCorrector_Output
module load Rcorrector/1.0.2-foss-2016b
run_rcorrector.pl -1 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-110-47576580/138599-110_S27_L001_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-110-47576580/138599-110_S27_L002_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-110-47576580/138599-110_S27_L003_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-110-47576580/138599-110_S27_L004_R1_001.fastq -2 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-110-47576580/138599-110_S27_L001_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-110-47576580/138599-110_S27_L002_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-110-47576580/138599-110_S27_L003_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-110-47576580/138599-110_S27_L004_R2_001.fastq -t 4 > rCorrector_110.log
run_rcorrector.pl -1 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L001_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L002_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L003_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L004_R1_001.fastq -2 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L001_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L002_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L003_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-134-47587572/138599-134_S21_L004_R2_001.fastq -t 4 > rCorrector_134.log
run_rcorrector.pl -1 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-23-47580598/138599-23_S22_L001_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-23-47580598/138599-23_S22_L002_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-23-47580598/138599-23_S22_L003_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-23-47580598/138599-23_S22_L004_R1_001.fastq -2 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-23-47580598/138599-23_S22_L001_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-23-47580598/138599-23_S22_L002_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-23-47580598/138599-23_S22_L003_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-23-47580598/138599-23_S22_L004_R2_001.fastq -t 4 > rCorrector_23.log
run_rcorrector.pl -1 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-63-47586581/138599-63_S23_L001_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-63-47586581/138599-63_S23_L002_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-63-47586581/138599-63_S23_L003_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-63-47586581/138599-63_S23_L004_R1_001.fastq -2 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-63-47586581/138599-63_S23_L001_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-63-47586581/138599-63_S23_L002_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-63-47586581/138599-63_S23_L003_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-63-47586581/138599-63_S23_L004_R2_001.fastq -t 4 > rCorrector_63.log
run_rcorrector.pl -1 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-68-47581561/138599-68_S18_L001_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-68-47581561/138599-68_S18_L002_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-68-47581561/138599-68_S18_L003_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-68-47581561/138599-68_S18_L004_R1_001.fastq -2 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-68-47581561/138599-68_S18_L001_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-68-47581561/138599-68_S18_L002_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-68-47581561/138599-68_S18_L003_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-68-47581561/138599-68_S18_L004_R2_001.fastq -t 4 > rCorrector_68.log
run_rcorrector.pl -1 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-69-47569618/138599-69_S24_L001_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-69-47569618/138599-69_S24_L002_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-69-47569618/138599-69_S24_L003_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-69-47569618/138599-69_S24_L004_R1_001.fastq -2 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-69-47569618/138599-69_S24_L001_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-69-47569618/138599-69_S24_L002_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-69-47569618/138599-69_S24_L003_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-69-47569618/138599-69_S24_L004_R2_001.fastq -t 4 > rCorrector_69.log
run_rcorrector.pl -1 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-8-47580595/138599-8_S15_L001_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-8-47580595/138599-8_S15_L002_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-8-47580595/138599-8_S15_L003_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-8-47580595/138599-8_S15_L004_R1_001.fastq -2 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-8-47580595/138599-8_S15_L001_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-8-47580595/138599-8_S15_L002_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-8-47580595/138599-8_S15_L003_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-8-47580595/138599-8_S15_L004_R2_001.fastq -t 4 > rCorrector_8.log
run_rcorrector.pl -1 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-90-47571617/138599-90_S19_L001_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-90-47571617/138599-90_S19_L002_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-90-47571617/138599-90_S19_L003_R1_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-90-47571617/138599-90_S19_L004_R1_001.fastq -2 /lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-90-47571617/138599-90_S19_L001_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-90-47571617/138599-90_S19_L002_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-90-47571617/138599-90_S19_L003_R2_001.fastq,/lustre1/mdh72859/Denovo_Assembly/Fastq_Reads/138599-90-47571617/138599-90_S19_L004_R2_001.fastq -t 4 > rCorrector_90.log

#To clean the rCorrector output into a format ready for use in Trinity, I'm using a python script from Harvard 
#(https://informatics.fas.harvard.edu/best-practices-for-de-novo-transcriptome-assembly-with-trinity.html)
#Python script is pasted below
"""
author: adam h freedman
afreedman405 at gmail.com
data: Fri Aug 26 10:55:18 EDT 2016
This script takes as an input Rcorrector error corrected Illumina paired-reads
in fastq format and:
1. Removes any reads that Rcorrector indentifes as containing an error,
but can't be corrected, typically low complexity sequences. For these,
the header contains 'unfixable'.
2. Strips the ' cor' from headers of reads that Rcorrector fixed, to avoid
issues created by certain header formats for downstream tools.
3. Write a log with counts of (a) read pairs that were removed because one end
was unfixable, (b) corrected left and right reads, (c) total number of
read pairs containing at least one corrected read.
Currently, this script only handles paired-end data, and handle either unzipped
or gzipped files on the fly, so long as the gzipped files end with 'gz'.
"""

import sys        
import gzip
from itertools import izip,izip_longest
import argparse
from os.path import basename

def get_input_streams(r1file,r2file):
    if r1file[-2:]=='gz':
        r1handle=gzip.open(r1file,'rb')
        r2handle=gzip.open(r2file,'rb')
    else:
        r1handle=open(r1file,'r')
        r2handle=open(r2file,'r')
    
    return r1handle,r2handle
        
        
def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)  
    

if __name__=="__main__": 
    parser = argparse.ArgumentParser(description="options for filtering and logging rCorrector fastq outputs")
    parser.add_argument('-1','--left_reads',dest='leftreads',type=str,help='R1 fastq file')
    parser.add_argument('-2','--right_reads',dest='rightreads',type=str,help='R2 fastq file')
    parser.add_argument('-o','--out_prefix',dest='outprefix',type=str,help="prefix for filtered fastq output")
    opts = parser.parse_args()

    r1out=open(opts.outprefix+'_'+basename(opts.leftreads).replace('.gz',''),'w')
    r2out=open(opts.outprefix+'_'+basename(opts.rightreads).replace('.gz','') ,'w')

    r1_cor_count=0
    r2_cor_count=0
    pair_cor_count=0
    unfix_count=0   

    r1_stream,r2_stream=get_input_streams(opts.leftreads,opts.rightreads)

    with r1_stream as f1, r2_stream as f2:
        R1=grouper(f1,4)
        R2=grouper(f2,4)
        counter=0
        for entry in R1:
            counter+=1
            if counter%100000==0:
                print "%s reads processed" % counter
        
            head1,seq1,placeholder1,qual1=[i.strip() for i in entry]
            head2,seq2,placeholder2,qual2=[j.strip() for j in R2.next()]
            
            if 'unfixable' in head1 or 'unfixable' in head2:
                unfix_count+=1
            else:
                if 'cor' in head1:
                    r1_cor_count+=1
                if 'cor' in head2:
                    r2_cor_count+=1
                if 'cor' in head1 or 'cor' in head2:
                    pair_cor_count+=1
                
                head1=head1.split('l:')[0][:-1] # keeps all before the low kmer count statistic and removes the trailing whitespace character
                head2=head2.split('l:')[0][:-1] 
                #head1=head1.replace(' cor','')
                #head2=head2.replace(' cor','')
                r1out.write('%s\n' % '\n'.join([head1,seq1,placeholder1,qual1]))
                r2out.write('%s\n' % '\n'.join([head2,seq2,placeholder2,qual2]))

    unfix_log=open('rmunfixable.log','w')
    unfix_log.write('total PE reads:%s\nremoved PE reads:%s\nretained PE reads:%s\nR1 corrected:%s\nR2 corrected:%s\npairs corrected:%s\n' % (counter,unfix_count,counter-unfix_count,r1_cor_count,r2_cor_count,pair_cor_count))
            
    r1out.close()
    r2out.close() 
#The above script is being used in a local shell script (not run through cluster, just locally)
#Write and copy script to same directory as rCorrector Output

#FastQFilter.sh is as follows below:
python FilterUncorrectablePEfastq.py -1 138599-134_S21_L001_R1_001.cor.fq -2 138599-134_S21_L001_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_134_1.out
python FilterUncorrectablePEfastq.py -1 138599-134_S21_L002_R1_001.cor.fq -2 138599-134_S21_L002_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_134_2.out
python FilterUncorrectablePEfastq.py -1 138599-134_S21_L003_R1_001.cor.fq -2 138599-134_S21_L003_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_134_3.out
python FilterUncorrectablePEfastq.py -1 138599-134_S21_L004_R1_001.cor.fq -2 138599-134_S21_L004_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_134_4.out

python FilterUncorrectablePEfastq.py -1 138599-110_S27_L001_R1_001.cor.fq -2 138599-110_S27_L001_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_110_1.out
python FilterUncorrectablePEfastq.py -1 138599-110_S27_L002_R1_001.cor.fq -2 138599-110_S27_L002_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_110_2.out
python FilterUncorrectablePEfastq.py -1 138599-110_S27_L003_R1_001.cor.fq -2 138599-110_S27_L003_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_110_3.out
python FilterUncorrectablePEfastq.py -1 138599-110_S27_L004_R1_001.cor.fq -2 138599-110_S27_L004_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_110_4.out

python FilterUncorrectablePEfastq.py -1 138599-23_S22_L001_R1_001.cor.fq -2 138599-23_S22_L001_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_23_1.out
python FilterUncorrectablePEfastq.py -1 138599-23_S22_L002_R1_001.cor.fq -2 138599-23_S22_L002_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_23_2.out
python FilterUncorrectablePEfastq.py -1 138599-23_S22_L003_R1_001.cor.fq -2 138599-23_S22_L003_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_23_3.out
python FilterUncorrectablePEfastq.py -1 138599-23_S22_L004_R1_001.cor.fq -2 138599-23_S22_L004_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_23_4.out

python FilterUncorrectablePEfastq.py -1 138599-63_S23_L001_R1_001.cor.fq -2 138599-63_S23_L001_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_63_1.out
python FilterUncorrectablePEfastq.py -1 138599-63_S23_L002_R1_001.cor.fq -2 138599-63_S23_L002_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_63_2.out
python FilterUncorrectablePEfastq.py -1 138599-63_S23_L003_R1_001.cor.fq -2 138599-63_S23_L003_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_63_3.out
python FilterUncorrectablePEfastq.py -1 138599-63_S23_L004_R1_001.cor.fq -2 138599-63_S23_L004_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_63_4.out

python FilterUncorrectablePEfastq.py -1 138599-68_S18_L001_R1_001.cor.fq -2 138599-68_S18_L001_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_68_1.out
python FilterUncorrectablePEfastq.py -1 138599-68_S18_L002_R1_001.cor.fq -2 138599-68_S18_L002_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_68_2.out
python FilterUncorrectablePEfastq.py -1 138599-68_S18_L003_R1_001.cor.fq -2 138599-68_S18_L003_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_68_3.out
python FilterUncorrectablePEfastq.py -1 138599-68_S18_L004_R1_001.cor.fq -2 138599-68_S18_L004_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_68_4.out

python FilterUncorrectablePEfastq.py -1 138599-69_S24_L001_R1_001.cor.fq -2 138599-69_S24_L001_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_69_1.out
python FilterUncorrectablePEfastq.py -1 138599-69_S24_L002_R1_001.cor.fq -2 138599-69_S24_L002_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_69_2.out
python FilterUncorrectablePEfastq.py -1 138599-69_S24_L003_R1_001.cor.fq -2 138599-69_S24_L003_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_69_3.out
python FilterUncorrectablePEfastq.py -1 138599-69_S24_L004_R1_001.cor.fq -2 138599-69_S24_L004_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_69_4.out

python FilterUncorrectablePEfastq.py -1 138599-8_S15_L001_R1_001.cor.fq -2 138599-8_S15_L001_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_8_1.out
python FilterUncorrectablePEfastq.py -1 138599-8_S15_L002_R1_001.cor.fq -2 138599-8_S15_L002_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_8_2.out
python FilterUncorrectablePEfastq.py -1 138599-8_S15_L003_R1_001.cor.fq -2 138599-8_S15_L003_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_8_3.out
python FilterUncorrectablePEfastq.py -1 138599-8_S15_L004_R1_001.cor.fq -2 138599-8_S15_L004_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_8_4.out

python FilterUncorrectablePEfastq.py -1 138599-90_S19_L001_R1_001.cor.fq -2 138599-90_S19_L001_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_90_1.out
python FilterUncorrectablePEfastq.py -1 138599-90_S19_L002_R1_001.cor.fq -2 138599-90_S19_L002_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_90_2.out
python FilterUncorrectablePEfastq.py -1 138599-90_S19_L003_R1_001.cor.fq -2 138599-90_S19_L003_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_90_3.out
python FilterUncorrectablePEfastq.py -1 138599-90_S19_L004_R1_001.cor.fq -2 138599-90_S19_L004_R2_001.cor.fq -o fixed 2>&1 > rmunfixable_90_4.out